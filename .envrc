# This file is used by direnv (https://direnv.net/).

if [ -f $OLDPWD/.env ] ; then
    echo "Exporting variables from $OLDPWD/.env"
    while IFS= read -r line || [ -n "$line" ]; do
      # Skip empty lines and lines starting with #
      [ -z "$line" ] && continue
      echo "$line" | grep -qE '^[[:space:]]*#' && continue

      # Extract key and value
      key=$(echo "$line" | cut -d '=' -f 1 | tr -d '[:space:]')
      value=$(echo "$line" | cut -d '=' -f 2-)

      # Remove leading and trailing spaces from the value
      value=$(echo "$value" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

      # Use eval to properly handle spaces and quotes
      eval export $key=\"$value\"
    done < $OLDPWD/.env
fi

if [ -x "$(command -v asdf)" ]; then
  DOTENVDIR=$(pwd)
  eval export POSTGRES_EXTRA_CONFIGURE_OPTIONS=\"--with-lz4 --with-uuid=e2fs\"
  cd $OLDPWD
  use asdf
  ASDF_IN_USE=true
  cd $DOTENVDIR
fi

# For capability with pure kerl/kiex we may have read .tool-versions and use versions from it.
if [ -f $OLDPWD/.tool-versions ] ; then
  if [ -z $ERLANG_VERSION ] ; then
    ERLANG_VERSION="$(cat $OLDPWD/.tool-versions | grep erlang | sed -e 's/\s*erlang \s*//')"
    eval export ERLANG_VERSION=$ERLANG_VERSION
  fi
  if [ -z $ELIXIR_VERSION ] ; then
    ELIXIR_VERSION="$(cat $OLDPWD/.tool-versions | grep elixir | sed -e 's/\s*elixir \s*//' | awk -F '-otp-' '{print $1 FS ""}' | sed 's/-otp-\s*//g')"
    eval export ELIXIR_VERSION=$ELIXIR_VERSION
  fi
fi

# - $ASDF_DIR usually set if asdf inhooked into shell
# - $ASDF_DIR not set if person using direnv's asdf plugin (https://github.com/asdf-community/asdf-direnv), for this case we extra
# set $ASDF_IN_USE to true above

if [ -z $ASDF_DIR ] && [ -z $ASDF_IN_USE ] ; then
  if [ -x "$(command -v kerl)" ]; then
    ERLANGMK_CAP_VER="OTP-$ERLANG_VERSION"
    ERLANG_INSTALLATION="$(kerl list installations | grep $ERLANGMK_CAP_VER | cut -d' ' -f2)"
    if [ -f "$ERLANG_INSTALLATION/activate" ] ; then
        echo "Using Erlang $ERLANG_VERSION (in $ERLANG_INSTALLATION) via kerl."
        . $ERLANG_INSTALLATION/activate
    else
        echo "Erlang $ERLANG_VERSION not available. Please build it first with command \"kerl build $ERLANG_VERSION $ERLANGMK_CAP_VER && kerl install $ERLANGMK_CAP_VER  ~/erlang/$ERLANGMK_CAP_VER\" and then restart the shell"
    fi
  else
    echo "asdf and kerl both unavailable; using default system Erlang (if it's installed)."
  fi

  if [ -x "$(command -v kiex)" ]; then
    if kiex list|grep -q ${ELIXIR_VERSION} ; then
      . $HOME/.kiex/elixirs/elixir-${ELIXIR_VERSION}.env
    else
      echo "Elixir ${ELIXIR_VERSION} not available. Please build it first with command \"kiex install $ELIXIR_VERSION\" and then restart the shell"
    fi
  else
    echo "asdf and kerl both unavailable; Use default system Elixir (if it's installed)"
  fi
else
  # if we use postgress instealled via asdf ($PGDATA in this case exported), let's ensure that db initialized
  if [ ! -z $PGDATA ] && [ -z $ASDF_IN_USE ] && [ -x $"$(command -v initdb)" ] ; then
    initdb
  fi
fi

# hook vars mentioned in process-compose.yml
# if nix exist it will use flake, otherwise we export vars and make process-compose work without flake
if [ ! -z $ASDF_IN_USE ] && [ -x "$(command -v redis)" ] && [ -x "$(command -v process-compose)" ]; then
	if [ -x "$(command -v redis)" ]; then
	    mkdir -p .redis
    	eval export REDIS_PORT=3769
    	eval export REDIS_DIR="$PWD/.redis"
	fi
	if [ -x "$(command -v initdb)" ]; then
	    eval export LANG=en_US.UTF-8
    	eval export LC_ALL=en_US.UTF-8
    	eval export PGHOST=$(dirname $PGDATA)
	fi
fi

if [ -f $OLDPWD/.ssh_config ] ; then
	eval export SSH_CONFIG_FILE="$OLDPWD/.ssh_config"
fi

if [ -f $PWD/.ssh_config ] ; then
	eval export SSH_CONFIG_FILE="$PWD/.ssh_config"
fi
